apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

configurations {
    envProdDebugCompile
    envProdReleaseCompile
    envDevDebugCompile
    envDevReleaseCompile
}

ext {
    // ref: https://www.jayway.com/2015/03/11/automatic-versioncode-generation-in-android-gradle/
    buildVersionCode = { version ->
        def (major, minor, patch) = version.tokenize('.')
        (major, minor, patch) = [major, minor, patch].collect { it.toInteger() }
        major * 1000000 + minor * 1000 + patch
    }
    writeProps = { keys, localProps, outFile ->
        def props = new Properties()
        keys.each {
            def val = localProps.get(it)
            if (val == null) {
                throw new GradleException("$it は定義されていない。 local.properties にて定義してください。")
            }
            props.putAll((it): val.toString().bytes.encodeBase64().toString())
        }
        outFile.parentFile.mkdirs()
        outFile.withWriter { props.store it, null }
    }
    localProps = new Properties()
    rootProject.file('local.properties').withReader { localProps.load it }
    keystorePassword = localProps.getProperty('keystore.password')
}

android {
    // セマンティックバージョニングを利用してください
    version "1.1.1"
    compileSdkVersion 25
    buildToolsVersion '25.0.2'

    defaultConfig {
        applicationId "com.tumpaca.tp"
        minSdkVersion 19
        targetSdkVersion 25
        versionCode buildVersionCode(version)
        versionName version
        manifestPlaceholders = ['appName': '@string/app_name']
        buildConfigField "boolean", "ADMOB_TEST", "false"
        buildConfigField "String", "ADMOB_TESTDEVICE", '""'
    }

    signingConfigs {
        release {
            storeFile file('keystore.jks')
            storePassword keystorePassword
            keyAlias 'keystore'
            keyPassword keystorePassword
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            manifestPlaceholders = ['appName': '@string/app_name_debug']
            applicationIdSuffix '.debug'
            versionNameSuffix '-debug'
            buildConfigField "boolean", "ADMOB_TEST", "true"
            buildConfigField "String", "ADMOB_TESTDEVICE", '"' + localProps.getProperty('admob.testdevice', '') + '"'
        }
    }
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }
    dexOptions {
        dexInProcess true
        javaMaxHeapSize "4g"
        preDexLibraries true
    }
    lintOptions {
        abortOnError false
    }
}

preBuild {
    // TumblrのAPIキーをlocal.propertiesから読み込んでアプリに組み込まれるリソースを生成
    def authFile = file('src/main/res/raw/auth.properties')
    outputs.file authFile
    def adMobFile = file('src/main/res/raw/admob.properties')
    outputs.file adMobFile
    doLast {
        writeProps(['tumblr.consumer.key', 'tumblr.consumer.secret'], localProps, authFile)
        writeProps(['admob.app.id'], localProps, adMobFile)
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:25.1.0'
    compile 'com.android.support:design:25.1.0'
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile 'com.daksh:loglr:1.0.0'
    compile 'com.google.firebase:firebase-ads:10.0.1'
    compile 'com.google.firebase:firebase-analytics:10.0.1'
    compile 'com.google.firebase:firebase-crash:10.0.1'
    compile project(':jumblr')
    compile project(':GifImageView:library')
}
repositories {
    mavenCentral()
}

apply plugin: 'com.google.gms.google-services'
